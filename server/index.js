// Import Soundworks library modules (server side)
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _soundworksServer = require('soundworks/server');

// Import template modules (server side)

var _PlayerPerformanceJs = require('./PlayerPerformance.js');

var _PlayerPerformanceJs2 = _interopRequireDefault(_PlayerPerformanceJs);

var _soundworksServer2 = _interopRequireDefault(_soundworksServer);

var _soundworksUtilsSetup = require('soundworks/utils/setup');

// import appConfig from './config/app.json';
// import envConfig from './config/env.json';
var setup = (0, _soundworksUtilsSetup.generateMatrix)({ rows: 8, cols: 8 });
// Launch server
_soundworksServer.server.start();

// Instantiate the modules
var checkin = new _soundworksServer.ServerCheckin({ capacity: 100 });
var performance = new _PlayerPerformanceJs2['default']();

var locator = new _soundworksServer2['default'].ServerLocator({ setup: setup });
var placer = new _soundworksServer2['default'].ServerPlacer({ setup: setup });

// Map modules to client types:
// - the `'player'` clients (who take part in the scenario by connecting to the
//   server through the root URL) need to communicate with the `checkin` and the
//   `performance` on the server side;
// - we could also map other modules to additional client types (who would take
//   part in the scenario by connecting to the server through the '/clientType'
//   URL).
_soundworksServer.server.map('player', placer, /* checkin, */performance);
// server.map('soloist', soloistPerformance);
// server.map('conductor', control, conductorPerformance);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Z0NBQ3NDLG1CQUFtQjs7OzttQ0FFM0Isd0JBQXdCOzs7Ozs7b0NBR3ZCLHdCQUF3Qjs7OztBQUd2RCxJQUFNLEtBQUssR0FBRywwQ0FBZSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBRW5ELHlCQUFPLEtBQUssRUFBRSxDQUFDOzs7QUFHZixJQUFNLE9BQU8sR0FBRyxvQ0FBa0IsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNyRCxJQUFNLFdBQVcsR0FBRyxzQ0FBdUIsQ0FBQzs7QUFFNUMsSUFBTSxPQUFPLEdBQUcsSUFBSSw4QkFBVyxhQUFhLENBQUMsRUFBRSxLQUFLLEVBQUwsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUN4RCxJQUFNLE1BQU0sR0FBRyxJQUFJLDhCQUFXLFlBQVksQ0FBQyxFQUFFLEtBQUssRUFBTCxLQUFLLEVBQUUsQ0FBQyxDQUFBOzs7Ozs7Ozs7QUFTckQseUJBQU8sR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLGdCQUFpQixXQUFXLENBQUMsQ0FBQyIsImZpbGUiOiJzcmMvc2VydmVyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IFNvdW5kd29ya3MgbGlicmFyeSBtb2R1bGVzIChzZXJ2ZXIgc2lkZSlcbmltcG9ydCB7IHNlcnZlciwgU2VydmVyQ2hlY2tpbiB9IGZyb20gJ3NvdW5kd29ya3Mvc2VydmVyJztcbi8vIEltcG9ydCB0ZW1wbGF0ZSBtb2R1bGVzIChzZXJ2ZXIgc2lkZSlcbmltcG9ydCBQbGF5ZXJQZXJmb3JtYW5jZSBmcm9tICcuL1BsYXllclBlcmZvcm1hbmNlLmpzJztcblxuaW1wb3J0IHNvdW5kd29ya3MgZnJvbSAnc291bmR3b3Jrcy9zZXJ2ZXInO1xuaW1wb3J0IHsgZ2VuZXJhdGVNYXRyaXggfSBmcm9tICdzb3VuZHdvcmtzL3V0aWxzL3NldHVwJztcbi8vIGltcG9ydCBhcHBDb25maWcgZnJvbSAnLi9jb25maWcvYXBwLmpzb24nO1xuLy8gaW1wb3J0IGVudkNvbmZpZyBmcm9tICcuL2NvbmZpZy9lbnYuanNvbic7XG5jb25zdCBzZXR1cCA9IGdlbmVyYXRlTWF0cml4KHsgcm93czogOCwgY29sczogOCB9KTtcbi8vIExhdW5jaCBzZXJ2ZXJcbnNlcnZlci5zdGFydCgpO1xuXG4vLyBJbnN0YW50aWF0ZSB0aGUgbW9kdWxlc1xuY29uc3QgY2hlY2tpbiA9IG5ldyBTZXJ2ZXJDaGVja2luKHsgY2FwYWNpdHk6IDEwMCB9KTtcbmNvbnN0IHBlcmZvcm1hbmNlID0gbmV3IFBsYXllclBlcmZvcm1hbmNlKCk7XG5cbmNvbnN0IGxvY2F0b3IgPSBuZXcgc291bmR3b3Jrcy5TZXJ2ZXJMb2NhdG9yKHsgc2V0dXAgfSk7XG5jb25zdCBwbGFjZXIgPSBuZXcgc291bmR3b3Jrcy5TZXJ2ZXJQbGFjZXIoeyBzZXR1cCB9KVxuXG4vLyBNYXAgbW9kdWxlcyB0byBjbGllbnQgdHlwZXM6XG4vLyAtIHRoZSBgJ3BsYXllcidgIGNsaWVudHMgKHdobyB0YWtlIHBhcnQgaW4gdGhlIHNjZW5hcmlvIGJ5IGNvbm5lY3RpbmcgdG8gdGhlXG4vLyAgIHNlcnZlciB0aHJvdWdoIHRoZSByb290IFVSTCkgbmVlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBgY2hlY2tpbmAgYW5kIHRoZVxuLy8gICBgcGVyZm9ybWFuY2VgIG9uIHRoZSBzZXJ2ZXIgc2lkZTtcbi8vIC0gd2UgY291bGQgYWxzbyBtYXAgb3RoZXIgbW9kdWxlcyB0byBhZGRpdGlvbmFsIGNsaWVudCB0eXBlcyAod2hvIHdvdWxkIHRha2Vcbi8vICAgcGFydCBpbiB0aGUgc2NlbmFyaW8gYnkgY29ubmVjdGluZyB0byB0aGUgc2VydmVyIHRocm91Z2ggdGhlICcvY2xpZW50VHlwZSdcbi8vICAgVVJMKS5cbnNlcnZlci5tYXAoJ3BsYXllcicsIHBsYWNlciwgLyogY2hlY2tpbiwgKi8gcGVyZm9ybWFuY2UpO1xuLy8gc2VydmVyLm1hcCgnc29sb2lzdCcsIHNvbG9pc3RQZXJmb3JtYW5jZSk7XG4vLyBzZXJ2ZXIubWFwKCdjb25kdWN0b3InLCBjb250cm9sLCBjb25kdWN0b3JQZXJmb3JtYW5jZSk7XG4iXX0=