// Import external libraries
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

// Import Soundworks library modules (server side)

var _soundworksServer = require('soundworks/server');

// Import template modules (server side)

var _PlayerPerformanceJs = require('./PlayerPerformance.js');

var _PlayerPerformanceJs2 = _interopRequireDefault(_PlayerPerformanceJs);

// Instantiate the modules
var express = require('express');
var path = require('path');var checkin = new _soundworksServer.Checkin({ maxClients: 100 });
var performance = new _PlayerPerformanceJs2['default']();

// Launch server
var app = express();
var dir = path.join(process.cwd(), 'public');
_soundworksServer.server.start(app, dir, process.env.PORT || 3000);

// Map modules to client types:
// - the `'player'` clients (who take part in the scenario by connecting to the
//   server through the root URL) need to communicate with the `checkin` and the
//   `performance` on the server side;
// - we could also map other modules to additional client types (who would take
//   part in the scenario by connecting to the server through the '/clientType'
//   URL).
_soundworksServer.server.map('player', checkin, performance);
// server.map('soloist', soloistPerformance);
// server.map('conductor', control, conductorPerformance);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztnQ0FLZ0MsbUJBQW1COzs7O21DQUdyQix3QkFBd0I7Ozs7O0FBUHRELElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQUFTN0IsSUFBTSxPQUFPLEdBQUcsOEJBQVksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNqRCxJQUFNLFdBQVcsR0FBRyxzQ0FBdUIsQ0FBQzs7O0FBRzVDLElBQU0sR0FBRyxHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQ3RCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9DLHlCQUFPLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDOzs7Ozs7Ozs7QUFTakQseUJBQU8sR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMiLCJmaWxlIjoic3JjL3NlcnZlci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydCBleHRlcm5hbCBsaWJyYXJpZXNcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vLyBJbXBvcnQgU291bmR3b3JrcyBsaWJyYXJ5IG1vZHVsZXMgKHNlcnZlciBzaWRlKVxuaW1wb3J0IHsgc2VydmVyLCBDaGVja2luIH0gZnJvbSAnc291bmR3b3Jrcy9zZXJ2ZXInO1xuXG4vLyBJbXBvcnQgdGVtcGxhdGUgbW9kdWxlcyAoc2VydmVyIHNpZGUpXG5pbXBvcnQgUGxheWVyUGVyZm9ybWFuY2UgZnJvbSAnLi9QbGF5ZXJQZXJmb3JtYW5jZS5qcyc7XG5cbi8vIEluc3RhbnRpYXRlIHRoZSBtb2R1bGVzXG5jb25zdCBjaGVja2luID0gbmV3IENoZWNraW4oeyBtYXhDbGllbnRzOiAxMDAgfSk7XG5jb25zdCBwZXJmb3JtYW5jZSA9IG5ldyBQbGF5ZXJQZXJmb3JtYW5jZSgpO1xuXG4vLyBMYXVuY2ggc2VydmVyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBkaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3B1YmxpYycpO1xuc2VydmVyLnN0YXJ0KGFwcCwgZGlyLCBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDApO1xuXG4vLyBNYXAgbW9kdWxlcyB0byBjbGllbnQgdHlwZXM6XG4vLyAtIHRoZSBgJ3BsYXllcidgIGNsaWVudHMgKHdobyB0YWtlIHBhcnQgaW4gdGhlIHNjZW5hcmlvIGJ5IGNvbm5lY3RpbmcgdG8gdGhlXG4vLyAgIHNlcnZlciB0aHJvdWdoIHRoZSByb290IFVSTCkgbmVlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBgY2hlY2tpbmAgYW5kIHRoZVxuLy8gICBgcGVyZm9ybWFuY2VgIG9uIHRoZSBzZXJ2ZXIgc2lkZTtcbi8vIC0gd2UgY291bGQgYWxzbyBtYXAgb3RoZXIgbW9kdWxlcyB0byBhZGRpdGlvbmFsIGNsaWVudCB0eXBlcyAod2hvIHdvdWxkIHRha2Vcbi8vICAgcGFydCBpbiB0aGUgc2NlbmFyaW8gYnkgY29ubmVjdGluZyB0byB0aGUgc2VydmVyIHRocm91Z2ggdGhlICcvY2xpZW50VHlwZSdcbi8vICAgVVJMKS5cbnNlcnZlci5tYXAoJ3BsYXllcicsIGNoZWNraW4sIHBlcmZvcm1hbmNlKTtcbi8vIHNlcnZlci5tYXAoJ3NvbG9pc3QnLCBzb2xvaXN0UGVyZm9ybWFuY2UpO1xuLy8gc2VydmVyLm1hcCgnY29uZHVjdG9yJywgY29udHJvbCwgY29uZHVjdG9yUGVyZm9ybWFuY2UpO1xuIl19