#!/usr/bin/env node
var fse = require('fs-extra');
var hound = require('hound');
var path = require('path');
var util = require('util');

var javascripts = require('./javascripts');
var server = require('./server');
var styles = require('./styles');
var cwd = process.cwd();

'use strict';

/**
 * Options for babel transpiling.
 */
var babelOptions = {
  sourceMap: 'inline',
  modules: 'common',
  optional: ['runtime'],
};

/**
 * Options for browserify.
 */
var browserifyOptions = {
  debug: true,
  fullPaths: false,
};

/**
 * Watched directories
 */
var ejsTemplatesDirectory = path.join(cwd, 'views');
// style directories
var cssSrcDirectory = path.join(cwd, 'sass');
var cssPublicDirectory = path.join(cwd, 'public', 'css');
// server side javascript directories
var serverSrcDirectory = path.join(cwd, 'src', 'server');
var serverDistDirectory = path.join(cwd, 'server');
// client side javascript directories
var clientSrcDirectory = path.join(cwd, 'src', 'client');
var clientDistDirectory = path.join(cwd, 'client');
var clientPublicDirectory = path.join(cwd, 'public', 'js');
// common javascript directories (indexes must match)
// directories must exists when the script is launched
var commonSrcDirectories = [path.join(cwd, 'src', 'common')];
var commonDistDirectories = [path.join(cwd, 'common')];

/**
 * Define which file should be ignored by every command.
 */
var allowedExtentions = /\.ejs$|\.scss$|\.js$/;
var excludeFiles = /^\./; // exclude hidden files

/**
 * Test the given filename, to ensure it can be processed by any command / tranpsiler
 * @param {String} filename - The filename to be checked.
 * @param {Boolean} [ensureFile=true] - If set to false, don't test if the file exists.
 */
function isAllowed(filename, ensureFile) {
  ensureFile = ensureFile === undefined ? true : ensureFile;

  var basename = path.basename(filename);
  var isFile = ensureFile ? fse.statSync(filename).isFile() : true;
  var hasAllowedExt = allowedExtentions.test(basename);
  var notExcludeFile = !excludeFiles.test(basename);

  return isFile && hasAllowedExt && notExcludeFile;
}

// console.log(isAllowed('niap/test.js', false));
// console.log(isAllowed('niap/.test.scss', false));
// console.log(isAllowed('niap/test.ejs', false));
// console.log(isAllowed('niap/test.js~', false));
// console.log(isAllowed('niap/sdflkj.scss~', false));
// return;

const commands = {
  /**
   * Watch the file system and reinit the application accordingly
   */
  watch: function () {
    // watch ejs templates
    watchServerTemplates(ejsTemplatesDirectory);
    // watch sass files
    watchSassFiles(cssSrcDirectory, cssPublicDirectory, isAllowed);
    // watch javascript server files
    watchServerJavascriptFiles(serverSrcDirectory, serverDistDirectory, isAllowed);
    // watch javascript client files
    watchClientJavascriptFiles(clientSrcDirectory, clientDistDirectory, clientPublicDirectory, isAllowed);
    // watch common javascript files
    watchCommonJavascriptFiles(commonSrcDirectories, commonDistDirectories, isAllowed);

    server.start();
  },
  /**
   * Update all the files (css and js)
   */
  transpile: function() {
    console.log('@todo - transpile');
  },
  /**
   * Start the application
   */
  start: function() {
    server.start();
  },
};


/**
 * Watch the server templates.
 * Restart the server when a template file (aka. `ejs` file) is modified.
 */
function watchServerTemplates(srcDirectory) {
  var watcher = hound.watch(srcDirectory);

  watcher.on('create', function(filename, stats) {
    if (isAllowed(filename))
      server.restart();
  });

  watcher.on('change', function(filename, stats) {
    if (isAllowed(filename))
      server.restart();
  });
}

/**
 * Watch the sass files.
 */
function watchSassFiles(srcDirectory, distDirectory, isAllowed) {
  var watcher = hound.watch(srcDirectory);

  watcher.on('create', function(filename, stats) {
    if (isAllowed(filename))
      styles.process(srcDirectory, distDirectory, isAllowed);
  });

  watcher.on('change', function(filename, stats) {
    if (isAllowed(filename))
      styles.process(srcDirectory, distDirectory, isAllowed);
  });

  watcher.on('delete', function(filename, stats) {
    styles.process(srcDirectory, distDirectory, isAllowed);
  });
}

/**
 * Watch server js files.
 */
function watchServerJavascriptFiles(srcDirectory, distDirectory, isAllowed) {
  var watcher = hound.watch(srcDirectory);
  var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions);

  watcher.on('create', function(filename, stats) {
    if (isAllowed(filename)) {
      server.stop();
      transpiler.transpile(filename, [], server.start);
    }
  });

  watcher.on('change', function(filename, stats) {
    if (isAllowed(filename)) {
      server.stop();
      transpiler.transpile(filename, [], server.start);
    }
  });

  watcher.on('delete', function(filename, stats) {
    if (isAllowed(filename, false)) {
      server.stop();
      transpiler.delete(filename, server.start);
    }
  });
}

/**
 * Watch client js files.
 */
function watchClientJavascriptFiles(srcDirectory, distDirectory, publicDirectory, isAllowed) {
  var watcher = hound.watch(srcDirectory);
  var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);

  watcher.on('create', function(filename, stats) {
    if (isAllowed(filename))
      transpiler.transpile(filename, [], function() { transpiler.bundle(filename, publicDirectory, true); });
  });

  watcher.on('change', function(filename, stats) {
    if (isAllowed(filename))
      transpiler.transpile(filename, [], function() { transpiler.bundle(filename, publicDirectory, true); });
  });

  watcher.on('delete', function(filename, stats) {
    if (isAllowed(filename, false))
      transpiler.delete(filename, function() { transpiler.bundle(filename, publicDirectory, false); });
  });
}

/**
 * Watch common javascript files. Restarts the server as these files can beused server side.
 * For client side, watchify should do the job.
 */
function watchCommonJavascriptFiles(srcDirectories, distDirectories, isAllowed) {
  srcDirectories.forEach(function(srcDirectory, index) {
    fse.stat(srcDirectory, function(err, stats) {
      if (err || !stats.isDirectory)
        return console.log('=> "%s" is not a directory, restart the script to watch it'.red, srcDirectory);

      var distDirectory = distDirectories[index];
      var watcher = hound.watch(srcDirectory);
      var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions);

      watcher.on('create', function(filename, stats) {
        if (isAllowed(filename)) {
          server.stop();
          transpiler.transpile(filename, [], server.start);
        }
      });

      watcher.on('change', function(filename, stats) {
        if (isAllowed(filename)) {
          server.stop();
          transpiler.transpile(filename, [], server.start);
        }
      });

      watcher.on('delete', function(filename, stats) {
        if (isAllowed(filename, false)) {
          server.stop();
          transpiler.delete(filename, server.start);
        }
      });
    });
  });
}

// function transpile() {
//   console.log('bundleAll', path.join(cwd, clientSrcDir));

//   var es6files = [];
//   var sassDone = false;
//   var sassFolder = path.join(cwd, styleSrcDir);

//   // @NOTE exists is now deprecated
//   if (!fse.existsSync(sassFolder)) {
//     sassDone = true;
//   } else {
//     fse
//       .walk(sassFolder)
//       .on('data', function(item) {
//         if (sassDone) { return; }
//         processStyles(item.path);
//         sassDone = true;
//       });
//   }

//   // transpile all es6 files
//   fse
//     .walk(path.join(cwd, jsSrcDir))
//     .on('data', function(item) {
//       if (item.stats.isDirectory()) { return; }
//       es6files.push(item.path);
//     })
//     .on('end', function() {
//       transpile(es6files.shift(), es6files, function() {
//         // restart server
//         killServer();
//         runServer();

//         // rebundle clients
//         fse
//           .walk(path.join(cwd, clientSrcDir))
//           .on('data', function(item) {
//             // remove directories
//             if (item.stats.isDirectory()) { return; }
//             // remove non `index.js` files
//             if (!/index\.js$/.test(item.path)) { return; }
//             // remove `index.js` file in subfolders
//             var filePath = item.path.replace(path.join(cwd, clientSrcDir), '');
//             if (filePath.split('/').length !== 3) { return; }

//             // prepare path for bundle signature
//             var bundlePath = item.path.replace(cwd + '/', '');
//             bundle(bundlePath);
//           });
//       });
//     });
// }



/**
 * -----------------------------------------------
 * Process and execute the given command.
 * ----------------------------------------------- */
var command = process.argv[2];
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2) {
  argv[args[i]] = args[i + 1];
}

switch (command) {
  case '--watch':
    commands.watch();
    break;
  // case '--transpile':
  //   commands.transpile();
  //   break;
  // case '--start':
  //   commands.start();
  //   break;
}
/**
 * -----------------------------------------------
 * ----------------------------------------------- */


