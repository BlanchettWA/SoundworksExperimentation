#!/usr/bin/env node
var execSync = require('child_process').execSync;
var fork = require('child_process').fork;
var fs   = require('fs');
var path = require('path');
var util = require('util');

var babel = require('babel');
var browserify = require('browserify');
var fse = require('fs-extra');
var hound = require('hound');
var sass = require('node-sass');
var watchify = require('watchify');

'use strict';

// CONFIG
// -----------------------------------------------

var jsSrcDir = 'src';
var jsDistDir = '.';
var styleSrcDir = 'sass';
var viewsDir = 'views';

var serverSrcDir = path.join(jsSrcDir, 'server');
var clientSrcDir = path.join(jsSrcDir, 'client');
var clientDistDir = path.join(jsDistDir, 'client');
var serverIndex = path.join(jsDistDir, 'server/index.js');
var jsPublicDir = 'public/js';
var stylePublicDir = 'public/css';

var babelOptions = {
  sourceMap: 'inline',
  modules: 'common',
  optional: ['runtime']
};

// GLOBALS
// -----------------------------------------------

var cwd = process.cwd();
var server = null; // the process hosting the server

// colors for the command line
// cf. http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
var red   = '\033[0;31m';
var green = '\033[0;32m';
var NC    = '\033[0m'; // No Color

// handle command
var command = process.argv[2];
// arguments - create a key value object with next arguments
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2) {
  argv[args[i]] = args[i + 1];
}

// execute the correct function given the script
switch (command) {
  case '--watch':
    watch();
    break;
  case '--transpile':
    bundleAll();
    break;
}

// launch the server;
var cwd = process.cwd();
runServer();

process.on('uncaughtException', function (err) {
  console.log('Caught exception: ' + err);
  killServer();
  process.exit();
});

// UTILS
// -----------------------------------------------

function getJsTargetName(src) {
  return src.replace(jsSrcDir, jsDistDir);
}

function getJsBundleSource(src) {
  return path.join(clientDistDir, getJsBundleName(src), 'index.js');
}

function getJsBundleTarget(src) {
  return path.join(jsPublicDir, getJsBundleName(src) + '.js');
}

// returns the name of the specific client folder
function getJsBundleName(src) {
  return src.replace(clientSrcDir, '').split('/')[1];
}

function runServer() {
  var serverIndexPath = path.join(cwd, serverIndex);
  // @note deprecated in node > 0
  if (!fs.existsSync(serverIndexPath)) { return; }
  console.log(util.format('%s=> Start server%s', green, NC));
  server = fork(serverIndexPath);
}

function killServer() {
  if (!server) { return; }
  console.log(util.format('%s=> Kill server%s', green, NC));
  server.kill();
}


// MAIN LOGIC
// -----------------------------------------------

function watch() {
  var toMonitor = [serverSrcDir, viewsDir, clientSrcDir, styleSrcDir];

  // watch server js scripts (transpile file and restart server)
  var serverWatcher = hound.watch(serverSrcDir);
  serverWatcher.on('create', function(filename, stats) {
    killServer();
    transpile(filename, [], runServer);
  });

  serverWatcher.on('change', function(filename, stats) {
    killServer();
    transpile(filename, [], runServer);
  });

  // watch client js files (transpile file and rebundle client)
  var clientWatcher = hound.watch(clientSrcDir);
  clientWatcher.on('create', function(filename, stats) {
    transpile(filename, [], function() { bundle(filename); });
  });

  clientWatcher.on('change', function(filename, stats) {
    transpile(filename, [], function() { bundle(filename); });
  });

  // watch template scripts (restart the server)
  var viewsWatcher = hound.watch(viewsDir);
  viewsWatcher.on('create', function(filename, stats) {
    killServer();
    runServer();
  });

  viewsWatcher.on('change', function(filename, stats) {
    killServer();
    runServer();
  });

  // watch sass files (bundle css file)
  var sassWatcher = hound.watch(styleSrcDir);
  sassWatcher.on('create', function(filename, stats) {
    processStyles(filename);
  });

  sassWatcher.on('change', function(filename, stats) {
    processStyles(filename);
  });
}

function processStyles(src) {
  // console.log('sass !', path.join(cwd, styleSrcDir));
  fse
    .walk(path.join(cwd, styleSrcDir))
    .on('data', function(item) {
      var basename = path.basename(item.path, '.scss');
      if (/^_/.test(basename)) { return; }
      if (item.stats.isDirectory()) { return; }

      var outFile = item.path
        .replace(styleSrcDir, stylePublicDir)
        .replace('.scss', '.css');

      sass.render({
        file: item.path,
        outputStyle: 'compressed',
        sourceMap: true
      }, function(err, result) {
        if (err) { return console.error(err.message); }

        fse.outputFile(outFile, result.css, function(err) {
          if (err) { return console.error(err.message); }
          console.log('%s=> "%s" successfully written%s', green, outFile, NC);
        });
      });
    });
}


function transpile(src, stack, callback) {
  function next() {
    if (stack && stack.length)
      transpile(stack.shift(), stack, callback);
    else if (!stack.length && callback)
      callback();
  }

  // console.log(src, path.extname(src));
  if (src === undefined || path.extname(src) !== '.js')
    return next();

  var target = getJsTargetName(src);

  babel.transformFile(src, babelOptions, function(err, result) {
    if (err) { return console.log(err.codeFrame); }

    fse.outputFile(target, result.code, function(err) {
      if (err) { return console.error(err.message); }

      var msg = '%s=> "%s" successfully transpiled to "%s"%s';
      console.log(util.format(msg, green, src, target, NC));

      next();
    });
  });
}

function bundleAll() {
  console.log('bundleAll', path.join(cwd, clientSrcDir));

  var es6files = [];
  var sassDone = false;
  var sassFolder = path.join(cwd, styleSrcDir);

  // @NOTE exists is now deprecated
  if (!fs.existsSync(sassFolder)) {
    sassDone = true;
  } else {
    fse
      .walk(sassFolder)
      .on('data', function(item) {
        if (sassDone) { return; }
        processStyles(item.path);
        sassDone = true;
      });
  }

  // transpile all es6 files
  fse
    .walk(path.join(cwd, jsSrcDir))
    .on('data', function(item) {
      if (item.stats.isDirectory()) { return; }
      es6files.push(item.path);
    })
    .on('end', function() {
      transpile(es6files.shift(), es6files, function() {
        // restart server
        killServer();
        runServer();

        // rebundle clients
        fse
          .walk(path.join(cwd, clientSrcDir))
          .on('data', function(item) {
            // remove directories
            if (item.stats.isDirectory()) { return; }
            // remove non `index.js` files
            if (!/index\.js$/.test(item.path)) { return; }
            // remove `index.js` file in subfolders
            var filePath = item.path.replace(path.join(cwd, clientSrcDir), '');
            if (filePath.split('/').length !== 3) { return; }

            // prepare path for bundle signature
            var bundlePath = item.path.replace(cwd + '/', '');
            bundle(bundlePath);
          });
      });
    });
}

var bundlers = [];

function bundle(src) {
  if (src === undefined) { return }
  var sourceFilename = getJsBundleSource(src);
  var bundleFilename = getJsBundleTarget(src);

  var msg = '%s=> start bundling "%s"%s';
  console.log(util.format(msg, green, bundleFilename, NC));

  if (!bundlers[sourceFilename]) {
    var bundler = browserify(sourceFilename, {
      debug: true,
      cache: {}, // required for watchify
      packageCache: {}, // required for watchify
      plugin: [watchify],
      fullPaths: false,
    });

    function rebundle() {
      var start = new Date().getTime();

      bundler
        .bundle()
        .on('error', function(err) {
          console.error(err.message);
        })
        .on('end', function() {
          var end = new Date().getTime();
          var msg = '%s=> "%s" successfully created (compiled in: %sms)%s';
          console.log(util.format(msg, green, bundleFilename, (end - start), NC));
        })
        .pipe(fse.createWriteStream(bundleFilename));
    }

    bundler.on('update', rebundle);
    rebundle();

    bundlers[sourceFilename] = bundler;
  }
}
